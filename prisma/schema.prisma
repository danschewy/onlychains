// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          String    @id @default(cuid())
  role        Role      @default(USER)
  image       String?
  displayName String?
  bio         String?
  addressETH  String?
  addressBTC  String?
  posts       Post[] // One to Many relation
  // userId      String?
  gender      String?
  following   Follows[] @relation("follower")
  followedBy  Follows[] @relation("following")
  sessions    Session[]
  createdAt   DateTime? @default(now())
  language    String?
  // Payment
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             Int       @id @default(autoincrement())
  author         User      @relation(fields: [authorId], references: [id])
  authorId       String // relation scalar field  (used in the `@relation` attribute above)
  title          String?
  content        String?
  contentPreview String?
  imagePreview   String?
  postedDate     DateTime? @default(now())
  images         String[]
  // userId          String
  imageAuthor    String?
  authorName     String?
  votes_up       Int?
  votes_down     Int?
  updatedAt      DateTime? @updatedAt
  Payment        Payment[]
  // user            User      @relation(fields: [userId], references: [id]) // Add this line
}

enum Role {
  USER
  ADMIN
  CREATOR
}

model Payment {
  id          Int         @id @default(autoincrement())
  paymentType PaymentType @default(TIP)
  payer       String?
  payee       String
  amount      Decimal?
  Post        Post?       @relation(fields: [postId], references: [id])
  postId      Int?
}

enum PaymentType {
  TIP
  PURCHASE
}

// TEMP
model Note {
  id        String   @id @default(uuid())
  title     String   @unique
  content   String
  category  String?
  published Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "notes")
}
